{
  "name": "Bitcoinj",
  "tagline": "Personal bitcoinj fork",
  "body": "Build status: [![Build Status](https://travis-ci.org/bitcoinj/bitcoinj.png?branch=master)](https://travis-ci.org/bitcoinj/bitcoinj)  \r\nCoverage status: [![Coverage Status](https://coveralls.io/repos/bitcoinj/bitcoinj/badge.png?branch=master)](https://coveralls.io/r/bitcoinj/bitcoinj?branch=master)\r\n\r\n### Welcome to bitcoinj\r\n\r\nThe bitcoinj library is a Java implementation of the Bitcoin protocol, which allows it to maintain a wallet and send/receive transactions without needing a local copy of Bitcoin Core. It comes with full documentation and some example apps showing how to use it.\r\n\r\n### Technologies\r\n\r\n* Java 6+\r\n* [Maven 3+](http://maven.apache.org) - for building the project\r\n* [Orchid](https://github.com/subgraph/Orchid) - for secure communications over [TOR](https://www.torproject.org)\r\n* [Google Protocol Buffers](https://code.google.com/p/protobuf/) - for use with serialization and hardware communications\r\n\r\n### Getting started\r\n\r\nTo get started, it is best to have the latest JDK and Maven installed. The HEAD of the `master` branch contains the latest development code and various production releases are provided on feature branches.\r\n\r\n#### Building from the command line\r\n\r\nTo perform a full build use\r\n```\r\nmvn clean package\r\n```\r\nYou can also run\r\n```\r\nmvn site:site\r\n```\r\nto generate a website with useful information like JavaDocs.\r\n\r\nThe outputs are under the `target` directory.\r\n\r\n#### Building from an IDE\r\n\r\nAlternatively, just import the project using your IDE. [IntelliJ](http://www.jetbrains.com/idea/download/) has Maven integration built-in and has a free Community Edition. Simply use `File | Import Project` and locate the `pom.xml` in the root of the cloned project source tree.\r\n\r\n### Example applications\r\n\r\nThese are found in the `examples` module.\r\n\r\n#### Forwarding service\r\n\r\nThis will download the block chain and eventually print a Bitcoin address that it has generated.\r\n\r\nIf you send coins to that address, it will forward them on to the address you specified.\r\n\r\n```\r\n  cd examples\r\n  mvn exec:java -Dexec.mainClass=org.bitcoinj.examples.ForwardingService -Dexec.args=\"<insert a bitcoin address here>\"\r\n```\r\n\r\nNote that this example app *does not use checkpointing*, so the initial chain sync will be pretty slow. You can make an app that starts up and does the initial sync much faster by including a checkpoints file; see the documentation for\r\nmore info on this technique.\r\n\r\n### Where next?\r\n\r\nNow you are ready to [follow the tutorial](https://bitcoinj.github.io/getting-started).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}